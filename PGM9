#include <iostream>
#include <vector>
#include <algorithm>

struct Interval {
    int start;
    int end;

    Interval(int s, int e) : start(s), end(e) {}
};

vector<Interval> mergeIntervals(vector<Interval>& intervals) {
    sort(intervals.begin(), intervals.end(), [](const Interval& a, const Interval& b) {
        return a.start < b.start;
    });

    vector<Interval> mergedIntervals;
    for (const Interval& interval : intervals) {
        if (mergedIntervals.empty() || interval.start > mergedIntervals.back().end) {
            mergedIntervals.push_back(interval);
        } else {
            mergedIntervals.back().end = std::max(mergedIntervals.back().end, interval.end);
        }
    }

    return mergedIntervals;
}

int main() {
    vector<Interval> intervals = { {1, 3}, {2, 4}, {6, 8}, {9, 10} };
    vector<Interval> merged = mergeIntervals(intervals);

    for (const Interval& interval : merged) {
        cout << "[" << interval.start << ", " << interval.end << "] ";
    }
    std::cout << std::endl;

    return 0;
}
